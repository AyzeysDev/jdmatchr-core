spring.application.name=jdmatchr-core

spring.config.import=optional:classpath:local-config.properties

# --- JWT Configuration ---
# This will be overridden by local-config.properties during local dev,
# or by an environment variable in production.
# Provide a default (even if empty or a placeholder) if you want the app to start
# without local-config and without the env var explicitly set (though JwtUtil will log a warning).
jwt.secret=${JWT_SECRET:}

# --- PostgreSQL DataSource Configuration ---
# Use placeholders for sensitive data
spring.datasource.url=${db.url}
spring.datasource.username=${db.username}
spring.datasource.password=${db.password}
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# --- File Upload Configuration ---
# Max file size for a single file (e.g., 10MB). Frontend validates at 5MB.
spring.servlet.multipart.max-file-size=10MB
# Max request size for a multipart request (can include multiple files and form data) (e.g., 15MB)
spring.servlet.multipart.max-request-size=15MB

spring.ai.openai.api-key=${SPRING_AI_OPENAI_API_KEY:}
# Base URL for Gemini's OpenAI-compatible endpoint
# As per [https://ai.google.dev/gemini-api/docs/openai](https://ai.google.dev/gemini-api/docs/openai)
spring.ai.openai.base-url=https://generativelanguage.googleapis.com
spring.ai.openai.chat.completions-path=/v1beta/openai/chat/completions
# Specify the Gemini model to use.
# Start with a model known to be compatible, e.g., "gemini-pro" or "gemini-1.5-pro-latest".
# Your "gemini-2.5-pro-preview-05-06" might work, but verify its compatibility with this endpoint.
spring.ai.openai.chat.options.model=gemini-2.5-pro-preview-05-06