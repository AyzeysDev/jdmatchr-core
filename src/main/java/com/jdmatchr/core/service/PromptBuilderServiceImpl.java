// src/main/java/com/jdmatchr/core/service/PromptBuilderServiceImpl.java
package com.jdmatchr.core.service;

import org.springframework.stereotype.Service;

@Service
public class PromptBuilderServiceImpl implements PromptBuilderService {

    @Override
    public String buildPrompt(String jobTitle, String jobDescription, String resumeText) {
        // Using the new prompt provided by the user.
        // The .formatted() method requires that the placeholders %s are present in the text block.
        // It seems the provided prompt string already intends to use String.format or similar,
        // as it ends with .formatted(jobTitle, jobDescription, resumeText) in the user's example.
        // The structure of the prompt itself defines the JSON output.
        // The mockProcessingTimestamp was removed from this prompt structure,
        // so the AI will not generate it. If needed, it can be added back to the prompt's JSON schema.
        // Or, it can be generated by the backend *after* receiving the AI response, before saving.
        // For now, I'll assume the AI is not responsible for mockProcessingTimestamp based on the new prompt.
        // The AnalysisResultDto will need to be tolerant of this field being absent from AI response
        // or we adjust the DTO. Let's assume for now the DTO's mockProcessingTimestamp can be null
        // or we set it in the backend.

        // The prompt from the user:
        return """
        You are a smart career assistant AI.

        You will receive:
        - A job title
        - A job description
        - A candidate's resume (as plain text)

        Analyze the match between the resume and job description. Return **ONLY** a JSON object in the format below (no commentary, no formatting, just valid JSON):

        {
          "matchScore": number,
          "atsScore": number,
          "jdSummary": {
            "summary": string,
            "responsibilities": string[],
            "requiredQualifications": string[],
            "tone": string
          },
          "fluffAnalysis": {
            "summary": string,
            "detected": [
              { "original": string, "suggestion": string }
            ]
          },
          "roleFitAndAlignmentMetrics": {
            "prediction": {
              "verdict": "Strong Match" | "Moderate Match" | "Weak Match",
              "reason": string
            },
            "radarData": {
              "technicalSkills": number (0â€“100),
              "softSkills": number,
              "experienceLevel": number,
              "cultureFit": number
            },
            "alignmentBreakdown": {
              "skills": number,
              "experience": number,
              "education": number,
              "keywords": number
            }
          },
          "keywordAnalysis": {
            "matchedKeywords": string[],
            "missingKeywords": string[],
            "keywordDensityScore": number
          },
          "resumeSuggestions": string[],
          "interviewPreparationTopics": string[]
        }

        ----
        Job Title: %s

        Job Description:
        %s

        Resume:
        %s
        """.formatted(jobTitle, jobDescription, resumeText);
    }
}
